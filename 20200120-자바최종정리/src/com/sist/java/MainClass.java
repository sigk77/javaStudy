package com.sist.java;
/*
 * 	데이터 저장
 * 	========
 * 		= 변수 : 한개의 데이터를 저장하는 공간
 * 		  ==
 * 			데이터형
 * 			 1) 기본형 : 자바언어에서 메모리크기를 지정
 * 				====
 * 				  정수형 : byte,short,int,long
 * 				  실수형 : float,double
 * 				  문자형 : char
 * 				  논리형 : boolean
 * 				==> 형변환
 *    			 byte < char,short < int < long < float < double
 *    			=====   ==========   ====  =====  =====   ======
 *    								 4       8       4      8
 *    								============  ===============
 *    									10L           10.5F(f)
 * 			 2) 참조형
 * 				====
 * 				  주소를 저장한 다음에 데이터를 참조 : 배열, 클래스
 * 				=============
 * 					참조형
 * 					====
 * 					 주소 ======> 스택(메모리 자체 관리) => {}을 벗어나면 삭제
 * 					 실제 데이터 ==> 힙 => 프로그래머관리 => 가비지 컬렉션
 * 				==> 메소드
 * 					====
 * 					 이턴형 (실행 결과값), 매개변수(사용자 요청값)
 * 									================
 * 									=> 값만 전송 (Call by VaLue : 복사본)
 * 									=> 주소 전송 (Call by Reference)
 * 										: 원본(배열,클래스)
 * 		= 배열 : 같은 크기의 데이터를 여러개 저장
 * 			   데이터형 [] 배열명 = new 데이터형 [저장갯수]
 * 			 =================스택   ===============
 * 							
 * 		= 클래스 : 다른 크기의 데이터를 여러개 저장
 * 				데이터만 모아서 관리 ~VO,~DTO : 캡슐화
 * 				메소드만 모아서 관리 ~DTD ~ service , ~manager
 * 		= 
 * 메소드만 모아서 관리
 * 데이터+메소드(혼합) ->조립식
 * 
 * 
 * 		데이터 처리
 * 		=======
 * 		1)연산자 : 문자가 연산되면 정수형으로 변경, 형변환(int이하 데이터 =>int)
 * 				=> 다른 데
 *        단항연산자
 *        	 = 증감연산자 ( ++. 00)
 *           = 부정연산자(!) => boolean (true=>false,false=>true)
 *        이항연산자
 *        	 = 산술연산자(+,-,*,/,.*) = 형변환
 *        	 / => 0으로 나눌 수 없다
 *        	 / => 정수/정수=정수
 *        		
 *        	% 결과값은 항상 왼쪽 부호를 따라간다
 *        	 = 비교연산자( ==,!=,<.>,<=,>=) : 결과값 = boolean
 *        		=> 주로 사용처(if)
 *        	 = 논리연산자 (&& . ||) => 제어문
 *        		 효율적인 연산 
 *        		&& (직렬) => 왼쪽의 결과가 false => 오른쪽 계산 x
 *        		|| (병렬) => 왼쪽의 결과가 true =>
 *           = 대입연산자 : 연산자 우선순위가 가장 낮음
 *        			( = , += , -=)
 *        	삼항연산자 :if~else
 *        			조건 ? 값 1: 값2
 *        			===
 *        			true=> 값1
 *        			false => 값2
 *        			
 *        			if(a===b) a=b
 *  
 *         2) 제어문 (흐름)
 *         	 = 조건문( if , if~else , if~else if...)
 *         		형식)
 *         			if(조건문) => 조건문이 true면 => {문장수행}
 *         			{
 *         				실행문장 => 조건문 (부정연산자,비교연산자,논리연산자)
 *         			}
 *         
 *         			=> C언어 ==> if(0) , if(1)
 *         			==========================
 *         			if(조건문)
 *         			{
 *         				실행문장 => 조건문이 true
 *         			}
 *         			else
 *         			{
 *         				실행문장 => 조건문이 false
 *         			}
 *         			==========================
 *         			if(조건문) => 조건문 true,false
 *         			{
 *         				실행문장 true면 문장을 실행하고 종료
 *         					  false면 다음 조건문으로 이동
 *         			}
 *         			else if(조건문)
 *         			{
 *         				실행문장
 *         			}
 *         			elfse if(조건문)
 *         			{
 *         				실행문장
 *         			}
 *         			else
 *         			{
 *         				실행문장 : 조건이 없는 경우에는 => else문장을 수행
 *         						else문장은 생략가능
 *         			}
 *        			==========================
 *        			언어마다 => 동작이 동일(형식은 다르다)
 *        			for i in 1...9: => 오라클
 *       
 *         	 = 선택문(switch~case)
 *         		   switch(정수,문자,문자열)
 *         {
 *         		case 값1: 실행문장 , breal;
 *         		case 값2: 실행문장 , break;
 *         		default: 실행문장 => 생략가능
 *         		** case 값은 중복불가능
 *         	 = 반복문(for,while)
 *         				1	2	4
 *         		 for(초기값,조건문;증가식)
 *         		{
 *         			실행문장3
 *         		}
 *         		=> 1-2-3-4
 *         			 2-3-4
 *         			 2-3-4
 *         			=
 *         			 false면 종료
 *         		
 *         		  int[] arr={1,2,3,4,5,}
 *         			=> for(i:arr)
 *         			{
 *         				실행문장
 *         			}
 *         			
 *         			초기값 =======1
 *         			while =={조건문)=2
 *         			{
 *         				실행문장 ===3
 *         				증가식    == 4 ==> 증가후에 조건문으로 이동
 *         
 *         		 변수가 실제 저장된 값을 읽어보
 *         	 = 반복제어문(break,continue) ===> while : 데이터베이스 네트워크
 *         		break : 반복중단
 *         		continue : 제외(특정부분)
 *         *** while문 => 무한루프
 * 		==============================================기본문법
 * 
 * 		 관련된 명령문,변수를 묶어서 관리
 * 		명령 문 묶기 (메소드)
 * 		메소드 : 결과값(리턴형),요청값(매개변수)
 * 			  ===========
 * 
 * 		=================================
 * 			리턴형   			요청값(매개변수)
 * 			** 한개만                  ** 여러개
 * 		=================================
 * 		   	  o				 o => DB(검색) SQL
 * 		=================================
 * 		 	 o			     x
 * 		=================================
 * 			 x 	(void)		  o   => DB(insert,update,delete)
 * 		=================================
 * 			x	(void)	 	 x   => 거의 존재하지 않음
 * 		=================================
 */
public class MainClass {
/*
 * 	SQL -> 문자열 (자바,오라클)- 대소문자 구분
 * 
 * 		DML -> 데이터 조작 언어(프로그래머)  
 * 				Select,Insert,Update,Delete
 * 		DDDL  => 데이터정의연어 
 * 				Create,Alter,Drop,rename,truncate
 * 		DCL	==> 데이터 제어 언어
 * 		TCL =< 트랜젝션 언어
 * 
 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
